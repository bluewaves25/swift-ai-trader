# engine/core/signal.py

from dataclasses import dataclass
from typing import Dict, Any, Optional
from datetime import datetime

@dataclass
class Signal:
    strategy_name: str
    symbol: str
    action: str  # "BUY", "SELL", "HOLD"
    confidence: float
    size: float
    timestamp: datetime
    metadata: Dict[str, Any]

class Signal:
    """
    Represents a trading signal generated by a strategy.
    Now includes a priority score for intelligent execution.
    """
    def __init__(self, strategy_name: str, symbol: str, action: str, 
                 size: float, confidence: float, timestamp: datetime, 
                 metadata: Optional[dict] = None):
        self.strategy_name = strategy_name
        self.symbol = symbol
        self.action = action
        self.size = size
        self.confidence = confidence
        self.timestamp = timestamp
        self.metadata = metadata or {}
        self.priority = self._calculate_priority()

    def _calculate_priority(self) -> float:
        """
        Calculates a priority score based on confidence and strategy weight.
        """
        strategy_weight = self.metadata.get('strategy_weight', 1.0)
        # Simple weighted average for priority
        return (self.confidence * 0.7) + (strategy_weight * 0.3)
        
    def __repr__(self):
        return (f"Signal(strategy={self.strategy_name}, symbol={self.symbol}, "
                f"action={self.action}, size={self.size}, confidence={self.confidence:.2f}, "
                f"priority={self.priority:.2f})")
