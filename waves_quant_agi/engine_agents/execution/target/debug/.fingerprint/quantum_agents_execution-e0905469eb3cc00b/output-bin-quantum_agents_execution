{"$message_type":"diagnostic","message":"unused variable: `total_latency`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":2731,"byte_end":2744,"line_start":64,"line_end":64,"column_start":21,"column_end":34,"is_primary":true,"text":[{"text":"                let total_latency = self.latency_monitor.end_measurement(\"order_execution\", start_time).await?;","highlight_start":21,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":2731,"byte_end":2744,"line_start":64,"line_end":64,"column_start":21,"column_end":34,"is_primary":true,"text":[{"text":"                let total_latency = self.latency_monitor.end_measurement(\"order_execution\", start_time).await?;","highlight_start":21,"highlight_end":34}],"label":null,"suggested_replacement":"_total_latency","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `total_latency`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:64:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0met total_latency = self.latency_monitor.end_measurement(\"order_execution\", start_time).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_total_latency`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":3445,"byte_end":3597,"line_start":81,"line_end":81,"column_start":5,"column_end":157,"is_primary":true,"text":[{"text":"    async fn store_execution_result(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration, success: bool) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":157}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4307,"byte_end":4311,"line_start":101,"line_end":101,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&key, \"execution_data\", serde_json::to_string(&execution_data)?).await?;","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(dependency_on_unit_never_type_fallback)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4311,"byte_end":4311,"line_start":101,"line_end":101,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&key, \"execution_data\", serde_json::to_string(&execution_data)?).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":4405,"byte_end":4405,"line_start":102,"line_end":102,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&key, 86400).await?; // 24 hours","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:81:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn store_execution_result(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration, success: bool) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:101:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.hset(&key, \"execution_data\", serde_json::to_string(&execution_data)?).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dependency_on_unit_never_type_fallback)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&key, \"execution_data\", serde_json::to_string(&execution_data)?).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&key, 86400).await?; // 24 hours\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4479,"byte_end":4618,"line_start":107,"line_end":107,"column_start":5,"column_end":144,"is_primary":true,"text":[{"text":"    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":144}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4899,"byte_end":4902,"line_start":113,"line_end":113,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&success_key, success_count + 1).await?;","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4902,"byte_end":4902,"line_start":113,"line_end":113,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&success_key, success_count + 1).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":4964,"byte_end":4964,"line_start":114,"line_end":114,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&success_key, 86400).await?; // 24 hours","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":5457,"byte_end":5457,"line_start":122,"line_end":122,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&latency_key, new_avg).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":5506,"byte_end":5506,"line_start":123,"line_end":123,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&format!(\"{}:count\", latency_key), current_count + 1).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":5589,"byte_end":5589,"line_start":124,"line_end":124,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&latency_key, 86400).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":5639,"byte_end":5639,"line_start":125,"line_end":125,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&format!(\"{}:count\", latency_key), 86400).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:107:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:113:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set(&success_key, success_count + 1).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&success_key, success_count + 1).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&success_key, 86400).await?; // 24 hours\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         let new_avg = ((current_avg * current_count as f64) + latency.as_millis() as f64) / (current_count + 1) as f64;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&latency_key, new_avg).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&format!(\"{}:count\", latency_key), current_count + 1).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&latency_key, 86400).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&format!(\"{}:count\", latency_key), 86400).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `signal`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4534,"byte_end":4540,"line_start":107,"line_end":107,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {","highlight_start":60,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4534,"byte_end":4540,"line_start":107,"line_end":107,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {","highlight_start":60,"highlight_end":66}],"label":null,"suggested_replacement":"_signal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `signal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:107:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0ml: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_signal`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `size`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4548,"byte_end":4552,"line_start":107,"line_end":107,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {","highlight_start":74,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":4548,"byte_end":4552,"line_start":107,"line_end":107,"column_start":74,"column_end":78,"is_primary":true,"text":[{"text":"    async fn log_successful_execution(&self, symbol: &str, signal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {","highlight_start":74,"highlight_end":78}],"label":null,"suggested_replacement":"_size","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `size`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:107:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0mnal: &str, size: f64, latency: std::time::Duration) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_size`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":5730,"byte_end":5848,"line_start":130,"line_end":130,"column_start":5,"column_end":123,"is_primary":true,"text":[{"text":"    async fn log_failed_execution(&self, symbol: &str, signal: &str, size: f64, error: &str) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":123}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":6130,"byte_end":6133,"line_start":136,"line_end":136,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&failure_key, failure_count + 1).await?;","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":6133,"byte_end":6133,"line_start":136,"line_end":136,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&failure_key, failure_count + 1).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":6195,"byte_end":6195,"line_start":137,"line_end":137,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&failure_key, 86400).await?; // 24 hours","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":6651,"byte_end":6651,"line_start":151,"line_end":151,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(\"execution:errors\", serde_json::to_string(&error_data)?).await?;","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":6737,"byte_end":6737,"line_start":152,"line_end":152,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(\"execution:errors\", 86400).await?; // 24 hours","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:130:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn log_failed_execution(&self, symbol: &str, signal: &str, size: f64, error: &str) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:136:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set(&failure_key, failure_count + 1).await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&failure_key, failure_count + 1).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&failure_key, 86400).await?; // 24 hours\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.lpush\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(\"execution:errors\", serde_json::to_string(&error_data)?).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(\"execution:errors\", 86400).await?; // 24 hours\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":569,"byte_end":686,"line_start":20,"line_end":20,"column_start":5,"column_end":122,"is_primary":true,"text":[{"text":"    pub async fn log_execution(&self, symbol: &str, signal: &str, size: f64, latency: u128) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":122}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1148,"byte_end":1154,"line_start":32,"line_end":32,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1154,"byte_end":1154,"line_start":32,"line_end":32,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn log_execution(&self, symbol: &str, signal: &str, size: f64, latency: u128) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:32:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set_ex(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.set_ex\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1225,"byte_end":1297,"line_start":36,"line_end":36,"column_start":5,"column_end":77,"is_primary":true,"text":[{"text":"    pub async fn log_error(&self, error: &str) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1674,"byte_end":1679,"line_start":46,"line_end":46,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(key, value.to_string()).await?;","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1679,"byte_end":1679,"line_start":46,"line_end":46,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(key, value.to_string()).await?;","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn log_error(&self, error: &str) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:46:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.lpush(key, value.to_string()).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.lpush\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string()).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":1742,"byte_end":1837,"line_start":50,"line_end":50,"column_start":5,"column_end":100,"is_primary":true,"text":[{"text":"    pub async fn log_slippage(&self, symbol: &str, slippage_bps: f64) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":2250,"byte_end":2256,"line_start":60,"line_end":60,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":2256,"byte_end":2256,"line_start":60,"line_end":60,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:50:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn log_slippage(&self, symbol: &str, slippage_bps: f64) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:60:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set_ex(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.set_ex\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":2327,"byte_end":2419,"line_start":64,"line_end":64,"column_start":5,"column_end":97,"is_primary":true,"text":[{"text":"    pub async fn log_config_update(&self, param: &str, value: f64) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":2837,"byte_end":2842,"line_start":75,"line_end":75,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(key, value.to_string()).await?;","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":2842,"byte_end":2842,"line_start":75,"line_end":75,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(key, value.to_string()).await?;","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:64:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn log_config_update(&self, param: &str, value: f64) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:75:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.lpush(key, value.to_string()).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.lpush\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string()).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":1977,"byte_end":2076,"line_start":57,"line_end":57,"column_start":5,"column_end":104,"is_primary":true,"text":[{"text":"    async fn log_high_latency(&self, operation: &str, duration: Duration) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":104}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":2564,"byte_end":2569,"line_start":70,"line_end":70,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(\"execution:high_latency\", serde_json::to_string(&latency_data)?).await?;","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":2569,"byte_end":2569,"line_start":70,"line_end":70,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"        conn.lpush(\"execution:high_latency\", serde_json::to_string(&latency_data)?).await?;","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":2663,"byte_end":2663,"line_start":71,"line_end":71,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(\"execution:high_latency\", 3600).await?; // 1 hour","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn log_high_latency(&self, operation: &str, duration: Duration) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:70:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.lpush(\"execution:high_latency\", serde_json::to_string(&latency_data)?).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.lpush\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(\"execution:high_latency\", serde_json::to_string(&latency_data)?).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(\"execution:high_latency\", 3600).await?; // 1 hour\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":2754,"byte_end":2857,"line_start":76,"line_end":76,"column_start":5,"column_end":108,"is_primary":true,"text":[{"text":"    async fn store_latency_metric(&self, operation: &str, duration: Duration) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":3130,"byte_end":3134,"line_start":83,"line_end":83,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"current_ms\", latency_ms).await?;","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":3134,"byte_end":3134,"line_start":83,"line_end":83,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"current_ms\", latency_ms).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":3200,"byte_end":3200,"line_start":84,"line_end":84,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"timestamp\", std::time::SystemTime::now()","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":3936,"byte_end":3936,"line_start":100,"line_end":100,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&count_key, count + 1).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":3985,"byte_end":3985,"line_start":101,"line_end":101,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&sum_key, sum + latency_ms).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4039,"byte_end":4039,"line_start":102,"line_end":102,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&min_key, min.min(latency_ms)).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4096,"byte_end":4096,"line_start":103,"line_end":103,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"        conn.set(&max_key, max.max(latency_ms)).await?;","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4264,"byte_end":4264,"line_start":107,"line_end":107,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"avg_ms\", avg).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4319,"byte_end":4319,"line_start":108,"line_end":108,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"min_ms\", min.min(latency_ms)).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4390,"byte_end":4390,"line_start":109,"line_end":109,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"max_ms\", max.max(latency_ms)).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4461,"byte_end":4461,"line_start":110,"line_end":110,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"        conn.hset(&metric_key, \"count\", count + 1).await?;","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"::<_, _, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4560,"byte_end":4560,"line_start":113,"line_end":113,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&metric_key, 3600).await?; // 1 hour","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4618,"byte_end":4618,"line_start":114,"line_end":114,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&count_key, 3600).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4665,"byte_end":4665,"line_start":115,"line_end":115,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&sum_key, 3600).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4710,"byte_end":4710,"line_start":116,"line_end":116,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&min_key, 3600).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4755,"byte_end":4755,"line_start":117,"line_end":117,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.expire(&max_key, 3600).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:76:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn store_latency_metric(&self, operation: &str, duration: Duration) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:83:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.hset(&metric_key, \"current_ms\", latency_ms).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"current_ms\", latency_ms).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"timestamp\", std::time::SystemTime::now()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             .duration_since(std::time::UNIX_EPOCH)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m100\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&count_key, count + 1).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&sum_key, sum + latency_ms).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&min_key, min.min(latency_ms)).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.set\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(&max_key, max.max(latency_ms)).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105|\u001b[0m\u001b[0m         // Calculate and store average\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m106|\u001b[0m\u001b[0m         let avg = (sum + latency_ms) / (count + 1) as f64;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m107\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"avg_ms\", avg).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m108\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"min_ms\", min.min(latency_ms)).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"max_ms\", max.max(latency_ms)).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m110\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.hset\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, _, ()>\u001b[0m\u001b[0m(&metric_key, \"count\", count + 1).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111|\u001b[0m\u001b[0m         \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112|\u001b[0m\u001b[0m         // Set expiration\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&metric_key, 3600).await?; // 1 hour\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m114\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&count_key, 3600).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&sum_key, 3600).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m116\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&min_key, 3600).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m117\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        conn.expire\u001b[0m\u001b[0m\u001b[38;5;10m::<_, ()>\u001b[0m\u001b[0m(&max_key, 3600).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":592,"byte_end":701,"line_start":20,"line_end":20,"column_start":5,"column_end":114,"is_primary":true,"text":[{"text":"    pub async fn save_trade_state(&self, symbol: &str, trade_id: &str, state: &str) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":1116,"byte_end":1122,"line_start":31,"line_end":31,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":1122,"byte_end":1122,"line_start":31,"line_end":31,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn save_trade_state(&self, symbol: &str, trade_id: &str, state: &str) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:31:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set_ex(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.set_ex\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function depends on never type fallback being `()`","code":{"code":"dependency_on_unit_never_type_fallback","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":1193,"byte_end":1293,"line_start":35,"line_end":35,"column_start":5,"column_end":105,"is_primary":true,"text":[{"text":"    pub async fn save_session_state(&self, session_id: &str, status: &str) -> Result<(), Box<dyn Error>> {","highlight_start":5,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"specify the types explicitly","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in edition 2024, the requirement `!: FromRedisValue` will fail","code":null,"level":"note","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":1683,"byte_end":1689,"line_start":45,"line_end":45,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `()` annotations to avoid fallback changes","code":null,"level":"help","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":1689,"byte_end":1689,"line_start":45,"line_end":45,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"        conn.set_ex(key, value.to_string(), 604800).await?;","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<_, _, ()>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function depends on never type fallback being `()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn save_session_state(&self, session_id: &str, status: &str) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: specify the types explicitly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: in edition 2024, the requirement `!: FromRedisValue` will fail\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:45:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conn.set_ex(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `()` annotations to avoid fallback changes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        conn.set_ex\u001b[0m\u001b[0m\u001b[38;5;10m::<_, _, ()>\u001b[0m\u001b[0m(key, value.to_string(), 604800).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `operation`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":986,"byte_end":995,"line_start":27,"line_end":27,"column_start":37,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn start_measurement(&self, operation: &str) -> Instant {","highlight_start":37,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":986,"byte_end":995,"line_start":27,"line_end":27,"column_start":37,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn start_measurement(&self, operation: &str) -> Instant {","highlight_start":37,"highlight_end":46}],"label":null,"suggested_replacement":"_operation","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `operation`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:27:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn start_measurement(&self, operation: &str) -> Instant {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_operation`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `config` and `rx` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\execution_logic.rs","byte_start":308,"byte_end":322,"line_start":10,"line_end":10,"column_start":12,"column_end":26,"is_primary":false,"text":[{"text":"pub struct ExecutionLogic {","highlight_start":12,"highlight_end":26}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\execution_logic.rs","byte_start":467,"byte_end":473,"line_start":15,"line_end":15,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: HashMap<String, Value>,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\execution_logic.rs","byte_start":504,"byte_end":506,"line_start":16,"line_end":16,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    rx: mpsc::Receiver<HashMap<String, Value>>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: fields `config` and `rx` are never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\execution_logic.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ExecutionLogic {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: HashMap<String, Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    rx: mpsc::Receiver<HashMap<String, Value>>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `get_execution_stats` and `get_all_execution_stats` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":489,"byte_end":507,"line_start":18,"line_end":18,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"impl OrderExecutor {","highlight_start":1,"highlight_end":19}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":8471,"byte_end":8490,"line_start":203,"line_end":203,"column_start":18,"column_end":37,"is_primary":true,"text":[{"text":"    pub async fn get_execution_stats(&self, symbol: &str) -> Result<HashMap<String, f64>, Box<dyn Error>> {","highlight_start":18,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\order_executor.rs","byte_start":9830,"byte_end":9853,"line_start":234,"line_end":234,"column_start":18,"column_end":41,"is_primary":true,"text":[{"text":"    pub async fn get_all_execution_stats(&self) -> Result<HashMap<String, HashMap<String, f64>>, Box<dyn Error>> {","highlight_start":18,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: methods `get_execution_stats` and `get_all_execution_stats` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:203:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl OrderExecutor {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_execution_stats(&self, symbol: &str) -> Result<HashMap<String, f64>, Box<dyn \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_all_execution_stats(&self) -> Result<HashMap<String, HashMap<String, f64>>, B\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\slippage_controller.rs","byte_start":130,"byte_end":148,"line_start":6,"line_end":6,"column_start":12,"column_end":30,"is_primary":false,"text":[{"text":"pub struct SlippageController {","highlight_start":12,"highlight_end":30}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\slippage_controller.rs","byte_start":179,"byte_end":185,"line_start":8,"line_end":8,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: HashMap<String, Value>,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `config` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\slippage_controller.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct SlippageController {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    metrics: Metrics,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: HashMap<String, Value>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `update_slippage_limit` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\slippage_controller.rs","byte_start":245,"byte_end":268,"line_start":12,"line_end":12,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"impl SlippageController {","highlight_start":1,"highlight_end":24}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\core\\slippage_controller.rs","byte_start":1199,"byte_end":1220,"line_start":32,"line_end":32,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn update_slippage_limit(&mut self, new_limit_bps: f64) -> Result<(), Box<dyn Error>> {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: method `update_slippage_limit` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\slippage_controller.rs:32:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl SlippageController {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update_slippage_limit(&mut self, new_limit_bps: f64) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":120,"byte_end":127,"line_start":6,"line_end":6,"column_start":12,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Metrics {","highlight_start":12,"highlight_end":19}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\metrics.rs","byte_start":169,"byte_end":175,"line_start":8,"line_end":8,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: HashMap<String, Value>,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `config` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Metrics {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    redis_client: redis::Client,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: HashMap<String, Value>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `log_config_update` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\metrics.rs","byte_start":207,"byte_end":219,"line_start":11,"line_end":11,"column_start":1,"column_end":13,"is_primary":false,"text":[{"text":"impl Metrics {","highlight_start":1,"highlight_end":13}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\metrics.rs","byte_start":2340,"byte_end":2357,"line_start":64,"line_end":64,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn log_config_update(&self, param: &str, value: f64) -> Result<(), Box<dyn Error>> {","highlight_start":18,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: method `log_config_update` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\metrics.rs:64:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Metrics {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn log_config_update(&self, param: &str, value: f64) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\risk_filters.rs","byte_start":120,"byte_end":131,"line_start":6,"line_end":6,"column_start":12,"column_end":23,"is_primary":false,"text":[{"text":"pub struct RiskFilters {","highlight_start":12,"highlight_end":23}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\risk_filters.rs","byte_start":139,"byte_end":145,"line_start":7,"line_end":7,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: HashMap<String, Value>,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `config` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\risk_filters.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct RiskFilters {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: HashMap<String, Value>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `update_risk_limits` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\risk_filters.rs","byte_start":263,"byte_end":279,"line_start":13,"line_end":13,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"impl RiskFilters {","highlight_start":1,"highlight_end":17}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\risk_filters.rs","byte_start":1530,"byte_end":1548,"line_start":40,"line_end":40,"column_start":18,"column_end":36,"is_primary":true,"text":[{"text":"    pub async fn update_risk_limits(&mut self, max_daily_loss: f64, max_order_size: f64) -> Result<(), Box<dyn Error>> {","highlight_start":18,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: method `update_risk_limits` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\risk_filters.rs:40:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl RiskFilters {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn update_risk_limits(&mut self, max_daily_loss: f64, max_order_size: f64) -> Result<\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `config` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":157,"byte_end":171,"line_start":7,"line_end":7,"column_start":12,"column_end":26,"is_primary":false,"text":[{"text":"pub struct LatencyMonitor {","highlight_start":12,"highlight_end":26}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":179,"byte_end":185,"line_start":8,"line_end":8,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    config: HashMap<String, Value>,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: field `config` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct LatencyMonitor {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    config: HashMap<String, Value>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `get_latency_stats`, `get_all_latency_stats`, `get_average_latency`, `get_percentile_latency`, and `reset_measurements` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\latency_monitor.rs","byte_start":336,"byte_end":355,"line_start":14,"line_end":14,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"impl LatencyMonitor {","highlight_start":1,"highlight_end":20}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":4833,"byte_end":4850,"line_start":122,"line_end":122,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn get_latency_stats(&self, operation: &str) -> Result<HashMap<String, f64>, Box<dyn Error>> {","highlight_start":18,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":5201,"byte_end":5222,"line_start":130,"line_end":130,"column_start":18,"column_end":39,"is_primary":true,"text":[{"text":"    pub async fn get_all_latency_stats(&self) -> Result<HashMap<String, HashMap<String, f64>>, Box<dyn Error>> {","highlight_start":18,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":5782,"byte_end":5801,"line_start":144,"line_end":144,"column_start":12,"column_end":31,"is_primary":true,"text":[{"text":"    pub fn get_average_latency(&self, operation: &str) -> Option<Duration> {","highlight_start":12,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":6255,"byte_end":6277,"line_start":157,"line_end":157,"column_start":12,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn get_percentile_latency(&self, operation: &str, percentile: f64) -> Option<Duration> {","highlight_start":12,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\latency_monitor.rs","byte_start":6801,"byte_end":6819,"line_start":172,"line_end":172,"column_start":18,"column_end":36,"is_primary":true,"text":[{"text":"    pub async fn reset_measurements(&mut self) {","highlight_start":18,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: methods `get_latency_stats`, `get_all_latency_stats`, `get_average_latency`, `get_percentile_latency`, and `reset_measurements` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\latency_monitor.rs:122:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl LatencyMonitor {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_latency_stats(&self, operation: &str) -> Result<HashMap<String, f64>, Box<dyn\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_all_latency_stats(&self) -> Result<HashMap<String, HashMap<String, f64>>, Box\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_average_latency(&self, operation: &str) -> Option<Duration> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_percentile_latency(&self, operation: &str, percentile: f64) -> Option<Duration> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn reset_measurements(&mut self) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `StateManager` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":128,"byte_end":140,"line_start":6,"line_end":6,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"pub struct StateManager {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: struct `StateManager` is never constructed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:6:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct StateManager {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated items `new`, `save_trade_state`, `save_session_state`, and `get_trade_state` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\utils\\state_manager.rs","byte_start":220,"byte_end":237,"line_start":11,"line_end":11,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl StateManager {","highlight_start":1,"highlight_end":18}],"label":"associated items in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\state_manager.rs","byte_start":252,"byte_end":255,"line_start":12,"line_end":12,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(config: &HashMap<String, Value>) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\state_manager.rs","byte_start":605,"byte_end":621,"line_start":20,"line_end":20,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"    pub async fn save_trade_state(&self, symbol: &str, trade_id: &str, state: &str) -> Result<(), Box<dyn Error>> {","highlight_start":18,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\state_manager.rs","byte_start":1206,"byte_end":1224,"line_start":35,"line_end":35,"column_start":18,"column_end":36,"is_primary":true,"text":[{"text":"    pub async fn save_session_state(&self, session_id: &str, status: &str) -> Result<(), Box<dyn Error>> {","highlight_start":18,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\utils\\state_manager.rs","byte_start":1773,"byte_end":1788,"line_start":49,"line_end":49,"column_start":18,"column_end":33,"is_primary":true,"text":[{"text":"    pub async fn get_trade_state(&self, trade_id: &str) -> Result<Option<String>, Box<dyn Error>> {","highlight_start":18,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: associated items `new`, `save_trade_state`, `save_session_state`, and `get_trade_state` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\utils\\state_manager.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl StateManager {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14massociated items in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(config: &HashMap<String, Value>) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn save_trade_state(&self, symbol: &str, trade_id: &str, state: &str) -> Result<(), B\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn save_session_state(&self, session_id: &str, status: &str) -> Result<(), Box<dyn Er\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_trade_state(&self, trade_id: &str) -> Result<Option<String>, Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\execution_logic.rs","byte_start":1910,"byte_end":1969,"line_start":42,"line_end":42,"column_start":25,"column_end":84,"is_primary":true,"text":[{"text":"                        self.metrics.log_error(&format!(\"Execution failed: {}\", e));","highlight_start":25,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\execution_logic.rs:42:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.metrics.log_error(&format!(\"Execution failed: {}\", e));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":1431,"byte_end":1481,"line_start":39,"line_end":39,"column_start":13,"column_end":63,"is_primary":true,"text":[{"text":"            self.metrics.log_error(\"Invalid order parameters\");","highlight_start":13,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:39:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.metrics.log_error(\"Invalid order parameters\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":2243,"byte_end":2322,"line_start":54,"line_end":54,"column_start":9,"column_end":88,"is_primary":true,"text":[{"text":"        self.metrics.log_execution(symbol, signal, size, execution_latency.as_micros());","highlight_start":9,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:54:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.metrics.log_execution(symbol, signal, size, execution_latency.as_micros());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\order_executor.rs","byte_start":3221,"byte_end":3286,"line_start":74,"line_end":74,"column_start":17,"column_end":82,"is_primary":true,"text":[{"text":"                self.metrics.log_error(&format!(\"Order execution failed: {}\", e));","highlight_start":17,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\order_executor.rs:74:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.metrics.log_error(&format!(\"Order execution failed: {}\", e));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\slippage_controller.rs","byte_start":883,"byte_end":973,"line_start":25,"line_end":25,"column_start":13,"column_end":103,"is_primary":true,"text":[{"text":"            self.metrics.log_error(&format!(\"Slippage exceeded for {}: {} bps\", symbol, slippage_bps));","highlight_start":13,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\slippage_controller.rs:25:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   self.metrics.log_error(&format!(\"Slippage exceeded for {}: {} bps\", symbol, slippage_bps));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\slippage_controller.rs","byte_start":1113,"byte_end":1160,"line_start":28,"line_end":28,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        self.metrics.log_slippage(symbol, slippage_bps);","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\slippage_controller.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.metrics.log_slippage(symbol, slippage_bps);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src\\core\\slippage_controller.rs","byte_start":1445,"byte_end":1508,"line_start":37,"line_end":37,"column_start":9,"column_end":72,"is_primary":true,"text":[{"text":"        self.metrics.log_config_update(\"slippage_limit\", new_limit_bps);","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core\\slippage_controller.rs:37:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.metrics.log_config_update(\"slippage_limit\", new_limit_bps);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"34 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 34 warnings emitted\u001b[0m\n\n"}
